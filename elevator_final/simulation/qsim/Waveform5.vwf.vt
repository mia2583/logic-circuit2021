// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 20:26:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          week9_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module week9_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [9:0] data_out;
reg RST;
// wires                                               
wire [3:0] enter;
wire [3:0] next;
wire [3:0] now;

// assign statements (if any)                          
week9_2 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.data_out(data_out),
	.enter(enter),
	.next(next),
	.now(now),
	.RST(RST)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// data_out[ 9 ]
initial
begin
	data_out[9] = 1'b0;
	data_out[9] = #300000 1'b1;
	data_out[9] = #130000 1'b0;
end 
// data_out[ 8 ]
initial
begin
	data_out[8] = 1'b0;
end 
// data_out[ 7 ]
initial
begin
	data_out[7] = 1'b1;
	data_out[7] = #180000 1'b0;
end 
// data_out[ 6 ]
initial
begin
	data_out[6] = 1'b0;
end 
// data_out[ 5 ]
initial
begin
	data_out[5] = 1'b0;
end 
// data_out[ 4 ]
initial
begin
	data_out[4] = 1'b0;
end 
// data_out[ 3 ]
initial
begin
	data_out[3] = 1'b0;
end 
// data_out[ 2 ]
initial
begin
	data_out[2] = 1'b0;
	data_out[2] = #430000 1'b1;
end 
// data_out[ 1 ]
initial
begin
	data_out[1] = 1'b0;
end 
// data_out[ 0 ]
initial
begin
	data_out[0] = 1'b0;
	data_out[0] = #180000 1'b1;
	data_out[0] = #120000 1'b0;
end 

// RST
initial
begin
	RST = 1'b1;
end 
endmodule

