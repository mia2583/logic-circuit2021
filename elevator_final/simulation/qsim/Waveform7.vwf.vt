// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 20:48:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          elevator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module elevator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] key;
reg rst;
reg sharp;
reg star;
// wires                                               
wire arrived;
wire green1;
wire green2;
wire green3;
wire green4;
wire [3:0] next;
wire red1;
wire red2;
wire red3;
wire red4;

// assign statements (if any)                          
elevator i1 (
// port map - connection between master ports and signals/registers   
	.arrived(arrived),
	.clk(clk),
	.green1(green1),
	.green2(green2),
	.green3(green3),
	.green4(green4),
	.key(key),
	.next(next),
	.red1(red1),
	.red2(red2),
	.red3(red3),
	.red4(red4),
	.rst(rst),
	.sharp(sharp),
	.star(star)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(83)
	begin
		clk = 1'b0;
		clk = #6000 1'b1;
		# 6000;
	end
	clk = 1'b0;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b0;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b0;
	key[8] = #60000 1'b1;
	key[8] = #70000 1'b0;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b0;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b0;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b0;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b0;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
	key[2] = #550000 1'b1;
	key[2] = #90000 1'b0;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
	key[0] = #130000 1'b1;
	key[0] = #50000 1'b0;
	key[0] = #460000 1'b1;
	key[0] = #60000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// sharp
initial
begin
	sharp = 1'b0;
	sharp = #470000 1'b1;
	sharp = #40000 1'b0;
end 

// star
initial
begin
	star = 1'b0;
	star = #320000 1'b1;
	star = #130000 1'b0;
	star = #430000 1'b1;
	star = #40000 1'b0;
end 
endmodule

